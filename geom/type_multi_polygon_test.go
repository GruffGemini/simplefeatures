package geom

import (
	"reflect"
	"strconv"
	"testing"
)

func TestSortAndUniquify(t *testing.T) {
	for i, tt := range []struct {
		input  []XY
		output []XY
	}{
		{
			[]XY{},
			[]XY{},
		},
		{
			[]XY{{1, 2}},
			[]XY{{1, 2}},
		},
		{
			[]XY{{1, 2}, {1, 2}},
			[]XY{{1, 2}},
		},
		{
			[]XY{{1, 0}, {2, 0}},
			[]XY{{1, 0}, {2, 0}},
		},
		{
			[]XY{{2, 0}, {1, 0}},
			[]XY{{1, 0}, {2, 0}},
		},
		{
			[]XY{{1, 0}, {1, 0}, {1, 0}},
			[]XY{{1, 0}},
		},
		{
			[]XY{{1, 0}, {1, 0}, {2, 0}},
			[]XY{{1, 0}, {2, 0}},
		},
		{
			[]XY{{1, 0}, {2, 0}, {1, 0}},
			[]XY{{1, 0}, {2, 0}},
		},
		{
			[]XY{{2, 0}, {1, 0}, {1, 0}},
			[]XY{{1, 0}, {2, 0}},
		},
		{
			[]XY{{2, 0}, {2, 0}, {1, 0}},
			[]XY{{1, 0}, {2, 0}},
		},
		{
			[]XY{{2, 0}, {1, 0}, {2, 0}},
			[]XY{{1, 0}, {2, 0}},
		},
		{
			[]XY{{1, 0}, {2, 0}, {2, 0}},
			[]XY{{1, 0}, {2, 0}},
		},
		{
			[]XY{{1, 0}, {2, 0}, {3, 0}},
			[]XY{{1, 0}, {2, 0}, {3, 0}},
		},
		{
			[]XY{{1, 0}, {3, 0}, {2, 0}},
			[]XY{{1, 0}, {2, 0}, {3, 0}},
		},
		{
			[]XY{{2, 0}, {1, 0}, {3, 0}},
			[]XY{{1, 0}, {2, 0}, {3, 0}},
		},
		{
			[]XY{{2, 0}, {3, 0}, {1, 0}},
			[]XY{{1, 0}, {2, 0}, {3, 0}},
		},
		{
			[]XY{{3, 0}, {1, 0}, {2, 0}},
			[]XY{{1, 0}, {2, 0}, {3, 0}},
		},
		{
			[]XY{{3, 0}, {2, 0}, {1, 0}},
			[]XY{{1, 0}, {2, 0}, {3, 0}},
		},
	} {
		t.Run(strconv.Itoa(i), func(t *testing.T) {
			got := sortAndUniquifyXYs(tt.input)
			if !reflect.DeepEqual(got, tt.output) {
				t.Logf("got:  %v", got)
				t.Logf("want: %v", tt.output)
				t.Error("mismatch")
			}
		})
	}
}
